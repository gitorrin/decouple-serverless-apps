AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Sending notifications to SNS

Resources:
  # Define the SNS topic
  SnsTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Protocol: lambda
          Endpoint: !GetAtt TopicConsumerFunction.Arn

  # Add an https subscription only for notifications with attribute: notificationType=external          
  ExternalSubscription:
    Type: 'AWS::SNS::Subscription'
    Properties:
      TopicArn: !Ref SnsTopic
      #
      #
      # Update  with your https://webhook.site/ endpoint !
      #
      Endpoint: https://webhook.site/ebc711b1-888b-45d0-ba46-b87c7adce9f3
      Protocol: https
      FilterPolicy:
        notificationType:
          - external
      DeliveryPolicy:
        # Set few retries so that we can see the message in DLQ
        healthyRetryPolicy:
          numRetries: 3
          minDelayTarget: 1
          maxDelayTarget: 3
          numMinDelayRetries: 1
          numMaxDelayRetries: 2
          numNoDelayRetries: 0
          backoffFunction: exponential
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt ExternalSubscriptionDLQ.Arn
        
  
  # This is the DLQ for the HttpSubscription
  ExternalSubscriptionDLQ:
    Type: AWS::SQS::Queue
  
  # Provide permission for SNS to send to DLQ
  DLQPolicy: 
    Type: AWS::SQS::QueuePolicy
    Properties: 
      Queues: 
        - !Ref ExternalSubscriptionDLQ
      PolicyDocument: 
        Statement: 
          - 
            Action: 
              - sqs:SendMessage
            Effect: Allow
            Resource: 
              - !GetAtt ExternalSubscriptionDLQ.Arn
            Principal:
              AWS: "*"
            Condition:
              ArnEquals:
                aws:SourceArn:
                  Ref: SnsTopic  
  
  # Provide permission for SNS to invoke the Lambda function
  TopicConsumerFunction1Permission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref TopicConsumerFunction
      Principal: sns.amazonaws.com

  # Define the publisher Lambda function with permissions
  TopicPublisherFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: src/publisher/
      Handler: app.handler
      Runtime: nodejs12.x
      Timeout: 3
      MemorySize: 128
      Environment:
        Variables:
          SNStopic: !Ref SnsTopic
      Policies:
        ## Read more about SAM Policy templates at:
        ## https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-policy-templates.html
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt SnsTopic.TopicName

   # Define the consumer Lambda function
  TopicConsumerFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: src/consumer/
      Handler: app.handler
      Runtime: nodejs12.x
      Timeout: 3
      MemorySize: 128
      
      
Outputs:
  TopicPublisherFunction:
    Description: TopicPublisherFunction function name
    Value: !Ref TopicPublisherFunction
  
  TopicConsumerFunction:
    Description: TopicConsumerFunction function name
    Value: !Ref TopicConsumerFunction
  
  SNStopicName:
    Description: SNS topic name
    Value: !GetAtt SnsTopic.TopicName

  SNStopicARN:
    Description: SNS topic ARN
    Value: !Ref SnsTopic